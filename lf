#! /bin/bash
Usage()			# usage procedure for producing error messages.
{
	if [ -n "$1" ]; then echo $1; fi			
	echo "usage: lf [-h|--help] [-n|--num-result] <number> <destination dir>";exit 1;
}

Large_files()   
{
	if [ ! -d $dest_dir ];	# checking if destination exists
	then
	Usage "error: directory does not exist";exit 1;
	else
		if [ $user_id -eq 1 ];
		then
		echo -e "user is not sudo or root, results could be different\ndue to access restrictions\n"
		fi
	find $dest_dir -type f -printf "%s %f\n" 2>/dev/null | sort -rh | sed 's/ /./2g' | #finding the files and converting spaces in filenames to dots. 
		awk '{ hum[1024**4]="TB"; hum[1024**3]="GB"; hum[1024**2]="MB"; hum[1024]="KB"; hum[0]="B"; #awk command to
      		for (x=1024**4; x>=1024; x/=1024){							# transfer the bytes 
         		if ($1>=x) { printf "%3.1f%s\t%s\n",$1/x,hum[x],$2;break }			#into human readable format
      		}}' | head -n $num_result
exit 0;
fi
}
dest_dir="$1"
id | grep -e 'root' -e 'sudo' > /dev/null
user_id=$?
	if [ -z $dest_dir ];		# checking if destination entered
	then
	Usage "error: no destination entered";exit 1;
	else
		case "$dest_dir" in
			"-h" | "--help") Usage;exit 0;;
			"-n" | "--num-result") 
						num_result=$2
						number='^[0-9]+$'
							if ! [[ $num_result =~ $number ]]
							then
							dest_dir="$num_result"
							num_result=10
							Large_files
							else
							dest_dir=$3
							Large_files
							fi;;			
			*) num_result=10; Large_files;;
			esac
	fi	
